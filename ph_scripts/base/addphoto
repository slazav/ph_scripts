#!/bin/sh -efu

##################################################

PROG="${0##*/}"

show_help()
{
  cat <<EOF

$PROG - photoalbum creation

Usage: $PROG infile > outfile

Options:
    -h         display help screen
    -v         be more verbose
    -s         don't update files

Input file syntax:

\photo  <file> <title>
\photor <file> <title>
\photol <file> <title>
\end

Report bugs to <slazav@altlinux.org>
EOF
exit
}

##################################################

opts="hvs"

TEMP=`getopt -n "$PROG" -o $opts -- "$@"` || show_help
eval set -- "$TEMP"

skip_files=
while :; do
  case "$1" in
    -v) verbose=1 ;;
    -h) show_help ;;
    -s) skip_files=1 ;;
    --) shift; break ;;
  esac
  shift
done

[ "$#" = 1 ] || show_help

ifile="$1"
[ -r "$ifile" ] || { printf "$ifile: can't find file\n"; exit 1; }

base="${1%.*}"

##################################################

filter_text(){
  printf "%s" "$1" |
  sed -e '
    s/<[^>]*>//g
    s/<\|>//g
    s/[[:space:]]\+$//
    s/^[[:space:]]\+//
  '
}

close_table(){
  [ -n "$table_was_opened" ] || return 0
  printf "</tr></table></p>\n"
  table_was_opened=
  return 0
}

open_table(){
  local align="$1"
  [ -z "$table_was_opened" ] || return 0
  printf "<p><table border=0 align=$align cellpadding=10><tr>\n"
  table_was_opened=1
  return 0
}


if [ -z "$skip_files" ]; then
  images="$(sed -n -e '
      /^\\photo[rl]\?[[:space:]]\+/p
      /^\\end/q
    ' "$ifile")"

  files="$(printf "%s" "$images" | cut -d' ' -f2 | tr '\n' ' ')"
  files="${files% }"
  last_file="${files##* }"
  first_file="${files%% *}"

  num=0
  while read cmd file title; do
    num="$(($num+1))"

    purl="$(printf "$files" |
            sed -n -e "s/\(^\|.*[[:space:]]\)\([^[:space:]]\+\)[[:space:]]\+$file.*/\2/p")"
    purl="${purl:-$last_file}"
    purl="${purl%.*}.htm"

    nurl="$(printf "$files" |
            sed -n -e "s/.*$file[[:space:]]\+\([^[:space:]]\+\).*/\1/p")"
    nurl="${nurl:-$first_file}"
    nurl="${nurl%.*}.htm"

    index="../${ifile##*/}"; index="${index%.*}.htm"
    uurl="$index#photo$num"

    if [ ! -f "$base/$file" ] ;then [ ! -f "$base/$file.jpg" ] || file="$file.jpg"; fi

    ph_update_www ${verbose:+-v} -t "$title" -p "$purl" -u "$uurl" -n "$nurl" "$base/$file"
#    echo "$file $title"
  done <<EOF
  $images
EOF
fi

table_was_opened=
num=0
while IFS='' read -r line; do

  if [ -z "$line" ]; then
    close_table
    printf "\n"

  elif [ -z "${line%%\\photo*}" ]; then
    num="$(($num+1))"

    read cmd file title <<EOF
    $line
EOF

    case "${cmd#\\}" in
      photor) align=right ;;
      photol) align=left ;;
      *) align=center
    esac

    printf "%3d  %-15s %s\n" "$num" "$file" "$title" > /dev/stderr

    [ -f "$base/$file" ] || file="$file.jpg"

    alttitle="$(filter_text "$title")"
    hfile="${base##*/}/${file%.*}.htm"
    tfile="${base##*/}/_$file"

    s="$(ph_size "$base/_$file")"
    w="${s%% *}"
    h="${s##* }"

    open_table "$align"
    printf "<td width=$w valign=top><a name=\"photo$num\"></a>\n"
    printf "<a href=\"$hfile\">\n"
    printf "<img src=\"$tfile\" alt=\"$alttitle\"\n"
    printf "  width=$w height=$h></a><br>\n"
    printf "<font size=\"-1\"><i>$title</i></font></td>\n"

  elif [ -z "${line%%\\end*}" ]; then
    close_table
    printf "</body></html>\n"
    break
  else
    close_table
    printf "%s\n" "$line"
  fi
done < "$ifile"
close_table

