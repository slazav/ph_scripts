#!/usr/bin/perl

use strict;
use warnings;
use addphoto;
use Getopt::Long qw(GetOptions);

#################################################################
sub usage(){
print qq*
$0 -- update photoalbum

Usage:
  $0 <options> <infile> > <outfile>

Options:
    -h,--help    -- display help screen
    -q,--quiet   -- be quiet
    -m,--mstyle  -- mark style (see addphoto_img)
    -g,--gmap    -- add google maps ref (see addphoto_img)
    -l,--lang    -- add language support
    -f,--flat    -- flat album - pictures are in the same folder as infile
    --pswp       -- PhotoSwipe album (no html pages, all information in img tags)
    -T,--th_size <size> -- Create thumbnail images, name is _m_<name>,
                           size specified as in ph_resize (W1:W2:W3),
                           Default: "260:160:800".
    -M,--md_size <size> -- Create medium-size images with names _<nams> if needed,
                           size specified as in ph_resize (W1:W2:W3).
                           Use it in html. Default: none.

Input file syntax:
Commands are started at the beginning of line with '\\' symbol.
Other lines copied without changes. Commands:
\\photo  <file> <title>     -- photo
\\photo[r|l] <file> <title> -- left/right aligned photo
\\h(1|2|3|4)[r] <title>     -- header, 'r' for ruler above it
\\toc                       -- table of contents
\\end                       -- stop processing file
\\#                         -- comment line
\\\\<any text>               -- put '\\' at the beginning of the line.

Report bugs to <slazav\@altlinux.org>
*;
exit(1);
}


#################################################################
### get options 
my %opts;
$opts{th_size} = $addphoto::def_thscale;
GetOptions(
  "h|help"      => \$opts{help},
  "q|quiet"     => \$opts{quiet},
  "m|mstyle=s"  => \$opts{mstyle},
  "g|gmap"      => \$opts{gmap},
  "l|lang"      => \$opts{lang},
  "f|flat"      => \$opts{flat},
  "pswp"        => \$opts{pswp},
  "T|th_size=s" => \$opts{th_size},
  "M|md_size=s" => \$opts{md_size},
) or usage();

usage() if $opts{help} || @ARGV!=1;
$opts{infile} = shift;
die "can't find file: $opts{infile}\n"
  unless -f $opts{infile};

my ($dir, $base, $ext) = addphoto::path_split($opts{infile});
my $html = "$base.htm";
$base = $opts{flat}? '':"$base/";


print STDERR "[Album: $opts{infile}",
  "; photo dir: $base",
  "; html name: $html",
  ($opts{mstyle}? "; mstyle: $opts{mstyle}":''),
  ($opts{gmap}? '; google map refs':''),
  "]\n" unless $opts{quiet};

open IN, $opts{infile} or
  die "can't open $opts{infile}: $!\n";

### read photo and header lists
my @ph;
my @hh;
foreach(<IN>){
  next unless /^\\/; # skip non-command lines
  last if /^\\end/;  # stop at \end command
  if (/$addphoto::ph_re/){     # images
    if ($2=~m|^/| || $2=~m|^\.\.//| || $2=~m|/\.\./|){
      warn "Skip image with non-relative path: %2\n";
      next;
    }
    my @f = split(',', $2);
    my $t=$3;
    $t =~ s/\[(ru|en):/<div class=$1>/gi if $opts{lang};
    $t =~ s/\]/<\/div>/g if $opts{lang};
    push @ph, {files=>[@f], title=>$t};
  }
  elsif (/$addphoto::head_re/){  # headers
    my ($d, $t) = ($1, $3);
    $t =~ s/\[(ru|en):/<div class=$1>/gi if $opts{lang};
    $t =~ s/\]/<\/div>/g if $opts{lang};
    push @hh, {depth=>$d, title=>$t};
  }
}

### update files
print STDERR "[Updating files...]\n" unless $opts{quiet};
for (my $i=0; $i<@ph; $i++){
  my @f = @{$ph[$i]->{files}};
  my $t = $ph[$i]->{title};
  die "can't find file: $dir$base$f[0]\n"
    unless -f "$dir$base$f[0]";
  $t=~s/\"/\\\"/g;

  ## previous and next files:
  my $fp = ${$ph[$i==0? $#ph : $i-1]->{files}}[0];
  my $fn = ${$ph[$i==$#ph? 0 : $i+1]->{files}}[0];

  ## navigation links:
  my ($d, $b, $e) = addphoto::path_split($f[0]);
  my ($dp, $bp, $ep) = addphoto::path_split($fp);
  my ($dn, $bn, $en) = addphoto::path_split($fn);
  my $prev = addphoto::rel_dir($d, $dp) . "$bp.htm";
  my $next = addphoto::rel_dir($d, $dn) . "$bn.htm";
  my $up = ($opts{flat}?'':'../') . addphoto::rel_dir($d, '')  . "$html#ph" . ($i+1);

  ## construct options for addphoto_img:
  my $o =
    ($opts{gmap}    ? ' -g':'') .
    ($opts{quiet}   ? ' -q':'') .
    ($opts{lang}    ? ' -l':'') .
    ($opts{pswp}    ? ' --no-htm':'') .
    ($opts{style}   ? " -m '$opts{style}'":'') .
    ($opts{th_size} ? " -T '$opts{th_size}'":'') .
    ($opts{md_size} ? " -M '$opts{md_size}'":'') .
    ($t ? " -t \"$t\"":'') .
    " -p '$prev' -n '$next' -u '$up'";
  $o.=" $dir$base$_" foreach (@f);
  ## run addphoto_img
  `addphoto_img $o 1>&2`;
}

### create index html
print STDERR "[Creating HTML index...]\n" unless $opts{quiet};
seek IN, 0, 0;
my $op_tab=0;
my $np=0;
my $nh=0;
foreach(<IN>){

  if (/$addphoto::ph_re/){ # \photo commands
    $np++;
    my $al = ($1 eq 'r'?'right':($1 eq 'l'? 'left':'center'));
    my ($img, $title) = (${$ph[$np-1]->{files}}[0], $ph[$np-1]->{title});

    # paths of html page and thumbnail image from album index
    my ($id, $ib, $ie) = addphoto::path_split($img);
    my $ifile = "$base$img";
    my $hfile = "$base$id$ib.htm";
    my $tfile = "$base${id}_$ib$ie";
    my $mfile = "$base${id}_m_$ib$ie";

    # title without html for alt atribute
    my $atitle = addphoto::rem_html($title);

    # size of the thumbnail image
    my ($w, $h) = addphoto::image_size("$dir$tfile");

    my $pswp_data='';
    if ($opts{pswp}){
      $pswp_data .= " class='pswp_image'";
      $pswp_data .= " data-size=${w}x${h}";
    }

    print "<p><table border=0 align=$al cellpadding=10><tr>\n"
      if !$op_tab; $op_tab=1;
    print "<td width=$w valign=top><a name='ph$np'></a>\n";

    # collect all information for pswp in <div>
    if ($opts{pswp}){
      # size of the big image
      my ($wb, $hb) = addphoto::image_size("$dir$ifile");
      print "<div class='pswp_image' data='$ifile' data-size='${wb}x${hb}'\n";

      if ( -f "$dir$mfile") {
        my ($wm, $hm) = addphoto::image_size("$dir$mfile");
        print "  data-med='$mfile' data-med-size='${wm}x${hm}'\n";
      }

      my $markfile = "$base$id${ib}_m.gif";
      if ( -f "$markfile") {
        print "  mark-src='$markfile'\n";
      }

      my $exif = addphoto::get_exif("$dir$ifile");
      print "  dat='$exif->{dat}'" if $exif->{dat};
      print "  alt='$exif->{alt}'" if $exif->{alt};
      print "  lat='$exif->{lat}'" if $exif->{lat};
      print "  lon='$exif->{lon}'" if $exif->{lon};
      print ">\n";
      print "<a href='$base$id/$img'>\n";
    }
    else {
      print "<a href='$hfile'>\n";
    }
    print "<img src='$tfile' alt='$atitle'\n";
    print "  width=$w height=$h></a><br>\n";
    print "<div class='caption'>$title</div>\n";
    if ($opts{pswp}){ print "</div>\n"; }
    print "</td>\n";
  }
  else{
    print "</tr></table></p>\n" if $op_tab; $op_tab=0; # close table
    if (/$addphoto::head_re/){ # \h commands
      $nh++;
      my ($depth, $title) = ($hh[$nh-1]->{depth}, $hh[$nh-1]->{title});
      print( ($2 eq 'r'?'<hr>':'') .
        "<a name='h" . $nh . "'></a><h$depth>$title</h$1>\n");
    }
    elsif (/^\\toc/){ addphoto::html_toc(\@hh); }
    elsif (/^\\end/){ last; }
    elsif (/^\\\\/){ s/^\\//; print; }
    elsif (/^\\#/){} # skip comments
    elsif (/^\\keep/){} # skip keep commands
    elsif (/^\\/){ warn "warning: skipping unknown command: $_\n"; }
    else{ print; }
  }
}
print "</tr></table></p>\n" if $op_tab;
print STDERR "[Done: $np photos, $nh headers]\n" unless $opts{quiet};
