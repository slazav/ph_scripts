#!/usr/bin/perl

use strict;
use warnings;
use addphoto;
use Getopt::Long qw(GetOptions);
use Digest::MD5;

##################################################
sub usage(){
print qq*
$0 -- update html, marks and thumbnail for a single image

Usage: $0 <options> <file>

Options:
    -h,--help           -- display help screen
    -q,--quiet          -- be quiet
    -r,--mref <mapref>  -- links to maps.google.com or nakarte.me
    -g,--gmap           -- same as -M gmap, used for comaptibility with old versions
    -t,--title <title>  -- set image title
    -p,--prev <url>     -- url for "previous" reference
    -u,--up <url>       -- url for "up" reference
    -n,--next <url>     -- url for "next" reference
    -m,--mstyle <style> -- style of marks
    -l,--lang           -- languages support

Input files:
  name.{jpg,png,tiff,gif}  -- sourse image
  name.fig                 -- marks in fig format

Generated files:
  _name.{jpg,png,tiff,gif} -- thumbnail
  name_m.gif               -- marks
  name.htm                 -- html

Mark styles:
  simple_gif
  aa_gif (default)
  aa_gif_halo
  aa_gif_dark_halo

Mapref styles:
  none
  nakarte (default)
  gmap

Making a page with many images: $0 <options> <file1> <file2> ...


Report bugs to <slazav\@altlinux.org>
*;
exit(1);
}

##################################################

### get options.
my %opts;
GetOptions(
  "h|help"     => \$opts{help},
  "q|quiet"    => \$opts{quiet},
  "g|gmap"     => \$opts{gmap},
  "r|mref=s"   => \$opts{mref},
  "m|mstyle=s" => \$opts{mstyle},
  "t|title=s"  => \$opts{title},
  "p|prev=s"   => \$opts{purl},
  "n|next=s"   => \$opts{nurl},
  "u|up=s"     => \$opts{uurl},
  "l|lang"     => \$opts{lang},
) or usage();

$opts{mref} = 'nakarte' unless $opts{mref}; # default
$opts{mref} = 'gmap' if $opts{gmap};        # old-style -g option

usage() if $opts{help} || @ARGV<1;
my $infile = shift;
my @other = @ARGV;
die "error: can't find file: $infile\n" unless -f $infile;
foreach (@other) {die "error: can't find file: $_\n" unless -f $_;}

# define some options
$opts{$_} = $opts{$_} || ''
  foreach ('title', 'purl', 'nurl', 'uurl', 'mstyle');

my ($dir, $base, $ext) = addphoto::path_split($infile);
my ($w, $h) = addphoto::image_size($infile);

sub mark_create; # see below

## update marks if fig-file exists and newer then mark file
my $fig = "$dir$base.fig";
my $mrk = -r $fig ? "$dir${base}_m.gif": '';
if ($mrk && addphoto::isolder($mrk, $fig)){
  print STDERR "  creating mark file: $mrk\n" unless $opts{quiet};
  mark_create($infile, $fig, $mrk, $opts{mstyle})
}

## removing old-style marks (remove this code?)
my $oldmrk = "$dir$base.gif";
if ( -f $oldmrk && $oldmrk ne $infile){
  print STDERR "Removing old-style gif mark: $oldmrk\n";
  unlink($oldmrk);
}

## update thumbnail image:
## - if it does not exist or it is older then the image
## - if it is marked but no marks needed any more
my $th = "${dir}_$base$ext";
if (addphoto::isolder($th, $infile) ||
    (addphoto::thmark_check($th) && !$mrk && $#other<0)){
  print STDERR "  updating thumbnail: " if !$opts{quiet};
  addphoto::image_resize($infile, $th,
    (scale=>$addphoto::def_thscale, quiet=>$opts{quiet}));
}
## add thumbnail mark if needed
addphoto::thmark_add($th)
  if $mrk && !addphoto::thmark_check($th);

addphoto::thmark_add($th)
  if $#other > -0;


## Create html if needed.
## We use "key" to check that html-file is up-to-date.
my $htm = "$dir$base.htm";
my $key = Digest::MD5::md5_hex(join("\n",(
  $opts{title}, $opts{purl}, $opts{uurl}, $opts{nurl},
  $mrk ne '', $base.$ext, $w, $h, @other)));
my $oldkey = addphoto::key_read($htm);

if ($key ne $oldkey){
  print STDERR "  creating html file: $htm\n" unless $opts{quiet};

  my $atitle=addphoto::rem_html($opts{title});
  my $imgref = "$base$ext";
  my $mrkref = "${base}_m.gif";

  # default values for html style, scripts, top and bottom text
  my $sty="a {text-decoration: none;}";
  my $scr="";
  my $init="";
  my $top="";
  my $btm="";
  my $head .=qq*
    <meta http-equiv="Content-Type" content="text/html;
      charset=$addphoto::html_charset"/>*;

  # make language switch
  if ($opts{lang}){
    $top  .= $addphoto::html_lang_switch;
    $init .= ' onload="lang_init()"';
    my $s="${dir}lang.js";
    unless (-s $s){
      open  O, ">$s" or die "Can't open $s: $!\n";
      print O $addphoto::lang_script;
      close O;
    }
    $scr  .= '
      <script type="text/JavaScript" src="lang.js"></script>';
    $sty  .= qq*
      .ru {display: inline;}
      .en {display: none;}*;
  }

  # make title
  if ( $opts{title} ){
    $head .= qq*
    <title>$atitle</title>*;
    $btm .= qq*
    <div class=title>$opts{title}</div>*;
    $sty .= qq*
      .title { font: 16pt sans-serif;
               margin: 0px; padding-bottom: 20px;
               border-bottom: 1px solid #E0E0E0; width: 100%}*;
  }

  # make navigation panel
  if ( $opts{purl} || $opts{uurl} || $opts{nurl}){
    my ($p,$u,$n);
    if ($opts{lang}){
      $p = $addphoto::msgl{pref};
      $u = $addphoto::msgl{uref};
      $n = $addphoto::msgl{nref};
    }
    else {
      $p = $addphoto::msg{pref};
      $u = $addphoto::msg{uref};
      $n = $addphoto::msg{nref};
    }
    $p = "<a href=\"$opts{purl}\">$p</a>" if $opts{purl};
    $u = "<a href=\"$opts{uurl}\">$u</a>" if $opts{uurl};
    $n = "<a href=\"$opts{nurl}\">$n</a>" if $opts{nurl};
    $top .= qq*
    <table class=nav><tr>
      <td align=left>$p</td>
      <td align=center>$u</td>
      <td align=right>$n</td>
    </tr></table>*;
    # style
    $sty .= qq*
      .nav { font: bold 10pt sans-serif; width: 100%}*;
    # navigation links in the head
    $head .= "\n    <link rel=\"top\"       href=\"$opts{uurl}\">" if $opts{uurl};
    $head .= "\n    <link rel=\"previous\"  href=\"$opts{purl}\">" if $opts{purl};
    $head .= "\n    <link rel=\"next\"      href=\"$opts{nurl}\">" if $opts{nurl};
  }

  # main image
  my $main=qq*
    <img src='$imgref' width='$w' height='$h' alt='$atitle'>*;

  # marks + javascript for switching marks
  if ($mrk){
    my $s="${dir}mark.js";
    unless (-s $s){
      open O, "> $s" or die "Can't open $s: $!\n";
      print O $addphoto::mark_script;
      close O;
    }
    $scr .= '
      <script type="text/JavaScript" src="mark.js"></script>';
    $sty .= qq*
      #image { position: absolute; left: 0px; top: 0px; width: ${w}px; height: ${h}px; }
      #marks { position: absolute; left: 0px; top: 0px; width: ${w}px; visibility: visible; }
      .mrk { font: 8pt sans-serif; text-align: right; }*;
    my $msg_mark = $opts{lang}? $addphoto::msgl{mark_sw}:$addphoto::msg{mark_sw};
    $btm .= qq*
    <table align=right class=mrk><tr><td><form>
      $msg_mark
      <input type="checkbox" checked onclick="update_vis()">
      </form></td></tr></table>*;
    $main = qq*
    <div style="position: relative; height: ${h}px;"
         onclick="sw_marks(); update_vis()">
      <img id="image" src="$imgref" alt="$atitle">
      <img id="marks" src="$mrkref">
    </div>*;
  }
  if ($#other>-1){
    my $nn=$#other+2;
    $scr .= qq*    <script type="text/JavaScript">
      var nv = 0;
      function sw_imgs(){
        nv=(nv+1)\%$nn;
        for (var i=1;i<$nn;i++){
          document.getElementById("img"+i).style.visibility=
            i<=nv?'visible':'hidden'}}
    </script>*;
    $sty .= qq*
      #img0 { position: absolute; left: 0px; top: 0px; width: ${w}px; height: ${h}px; }
      .mrk { font: 8pt sans-serif; text-align: right; }*;

    $main = qq*
    <div style="position: relative; height: ${h}px;"
         onclick="sw_imgs();">
      <img id="img0" src="$imgref" alt="$atitle">*;
    for(my $i=1; $i<=$#other+1; $i++){
      my ($d, $b, $e) = addphoto::path_split($other[$i-1]);
      $sty .= qq*
        #img$i { position: absolute; left: 0px; top: 0px; width: ${w}px; visibility: hidden; }*;
      $main .= qq*
      <img id="img$i" src="$b$e" alt="$atitle">*;
    }
    $main .= qq*
    </div>*;
  }

  # info from exif
  my $exif = addphoto::html_exif($infile, \%opts);
  $btm .= qq*
    <div class=exif>$exif
    </div>*;
  $sty .= qq*
      .exif { font: bold 8pt sans-serif;}*;

  # wrap style settings
  if ($sty){
    $sty = qq*
    <style type="TEXT/CSS">$sty
    </style>*;
  }

  # write html
  open OUT, "> $htm" or die "can't open $htm: $!\n";
  print OUT qq*<html> <!--KEY:$key-->
  <head>$head$scr$sty
  </head>
  <body bgcolor="#FFFFFF"$init>$top$main$btm
  </body>*;
  print OUT "\n</html>\n";
  close OUT;
}

sub mark_create{
  my ($infile, $fig, $mrk, $mstyle) = @_;
  $mstyle = $addphoto::def_mstyle unless $mstyle;

  my ($fw, $fh)=addphoto::fig_im_size($fig, $infile);
  die "Bad fig file: $fig" unless $fw && $fh;
  my $sc = ($h/$fh + $w/$fw) / 2;
  $sc*=2 if $mstyle ne 'simple_gif';

  ## create gif file
  qx* LANG="$addphoto::fig_lang"\\
   fig2dev -m$sc -j -Lgif -D +0:200 -t'#FFFFFF' "$fig" "$mrk" ||\\
     rm -f -- "$mrk"*;

  ## build script for convert program
  # IE can only show transparent gifs, not png.
  # We can't use semi-transparent png here :(
  my $cmd;
  if ($mstyle eq 'simple_gif'){
  }
  elsif ($mstyle eq 'aa_gif'){
    $cmd=qq*
        ( "$infile"
          ( "$mrk" -alpha extract -blur 0.8 -threshold 15 -resize 50% )
          +matte -compose copy-opacity -composite -blur 2 )
        ( "$mrk" -resize 50% )
        -compose over -composite
        "$mrk"*;
  }
  elsif ($mstyle eq 'aa_gif_halo'){
    $cmd = qq*
        ( "$infile"
          ( "$mrk" -alpha extract -blur 1.2 -threshold 15 -resize 50% )
          +matte -compose copy-opacity -composite )
        ( "$mrk"
          ( -clone 0 +matte +level-colors white 
            ( -clone 0 -alpha extract -blur 4x3 -level 0%,50% )
            +matte -compose copy-opacity -composite )
          -compose dst-over -composite
          -resize 50% )
        -compose over -composite
        "$mrk"*;
  }
  elsif ($mstyle eq 'aa_gif_dark_halo'){
    $cmd = qq*
        ( "$infile"
          ( "$mrk" -alpha extract -blur 1.2 -threshold 15 -resize 50% )
          +matte -compose copy-opacity -composite )
        ( "$mrk" +level 0,30%
          ( -clone 0 +matte +level-colors white
            ( -clone 0 -alpha extract -blur 4x3 -level 0%,50% )
            +matte -compose copy-opacity -composite )
          -compose dst-over -composite
          -resize 50% )
        -compose over -composite
        "$mrk"*;
   }
   else{
     die "Unknown mark style: $mstyle\n";
   }
   if ($cmd){
     $cmd =~ s/([\(\)\n])/\\$1/g;
     qx"convert $cmd";
   }

#  png_dark_halo
#    $cmd=qq*
#        "$mrk" +level 0,30%
#        ( -clone 0 +matte +level-colors white
#          ( -clone 0 -alpha extract -blur 4x3 -level 0%,50% )
#          +matte -compose copy-opacity -composite )
#        -compose dst-over -composite
#        -resize 50%
#        "$mrk"*;
}

